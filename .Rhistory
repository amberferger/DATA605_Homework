#pairs(trainSet, gap=0.2)
y <- 2
View(trainSet)
trainSet <- read.csv('train.csv', sep=',')
testSet <- read.csv('test.csv', sep=',')
View(trainSet)
trainSet %>%
gather(id)
library(tidyverse)
trainSet %>%
gather(id)
trainSet %>%
gather(id, "value")
trainSet %>%
gather("id", "value")
gather(trainSet, "id", "value")
gather(trainSet, colnames(trainSet))
gather(trainSet, "id", "value", -id)
summary(trainSet)
library(tidyverse)
library(tidyverse)
```{r, echo = True}
```{r, echo = "False"}
pairs(matrixVals, gap=0.2)
matrixVals <- trainSet %%>
matrixVals <- trainSet %>%
filter(SalePrice, OverallQual, OverallCond)
pairs(matrixVals, gap=0.2)
matrixVals <- trainSet %>%
filter(SalePrice, OverallQual, OverallCond)
library(reshape)
install.packages("reshape")
library(reshape)
md <- melt(trainSet, id=(c("id")))
colnames(trainSet)
library(reshape)
md <- melt(trainSet, id=(c("Id")))
View(md)
View(md)
summarySet %>%
group_by(variable) %>%
summarize(AVG = mean(value),
MIN = min(value),
MAX = max(value),
STDEV = sdev(value))
summarySet <- melt(trainSet, id=(c("Id")))
summarySet %>%
group_by(variable) %>%
summarize(AVG = mean(value),
MIN = min(value),
MAX = max(value),
STDEV = sdev(value))
summarySet %>%
group_by(variable)
finalSet <- summarySet %>%
group_by(variable) %>%
summarize(AVG = mean(value),
MIN = min(value),
MAX = max(value),
STDEV = sdev(value)) %>%
ungroup()
str(summarySet)
is.numeric(trainSet$LotArea)
summary(trainSet)
View(matrixVals)
matrixVals <- trainSet %>%
select(SalePrice, OverallQual, OverallCond)
pairs(matrixVals, gap=0.2)
matrixVals <- trainSet %>%
select(LotArea, FullBath, GrLivArea)
pairs(matrixVals, gap=0.2)
matrixVals <- trainSet %>%
select(LotArea, TotalBsmtSF, GrLivArea)
pairs(matrixVals, gap=0.2)
spMatrix <- trainSet %>%
select(SalePrice, OverallQual, OverallCond)
pairs(spMatrix, gap=0.2)
matrixVals <- trainSet %>%
select(LotArea, TotalBsmtSF, GrLivArea)
cor(matrixVals)
hist(trainSet$SalePrice)
boxplot(trainSet$SalePrice)
hist(trainSet$SalePrice,
main="Distribution of Sale Prices",
xlab="Sale Price")
hist(trainSet$SalePrice,
main="Distribution of Sale Prices",
xlab="Sale Price",
bins = 10)
hist(trainSet$SalePrice,
main="Distribution of Sale Prices",
xlab="Sale Price",
breaks = 20)
hist(trainSet$SalePrice,
main="Distribution of Sale Prices",
xlab="Sale Price",
breaks = 30)
hist(trainSet$SalePrice,
main="Distribution of Sale Prices",
xlab="Sale Price",
breaks = 20)
20000/4
hist(trainSet$SalePrice,
main="Distribution of Sale Prices",
xlab="Sale Price",
breaks = 20)
boxplot(trainSet$SalePrice)
boxplot(trainSet$SalePrice,
main="Boxplot of Sale Prices",
xlab="Sale Price")
Y <- rnorm(n, mean=(N+1)/2)
n <- 10000
N <- 10
X <- runif(n, min = 1, max = N)
Y <- rnorm(n, mean=(N+1)/2)
X
Y <- rnorm(n, mean=(N+1)/2)
y
x <- median(X)
y <- quantile(Y)
y
str(y)
y[2]
x
cond = (X>x)
cond
x <- median(X)
y <- quantile(Y)[2]
pXx <- 1 - ((x-min(X))*(1/N))
PXy <- 1 - ((y-min(X)) * (1/N))
pXx
cond(X>x)
X[X>x]
pXx <- 1 - ((x-min(X))*(1/N))
y
z
x
(pXx*PXy)/PXy
(pXx*PXy)/PXy
x <- median(X)
y <- quantile(Y)[2]
pXx <- 1 - ((x-min(X))*(1/N))
PXy <- 1 - ((y-min(X)) * (1/N))
(pXx*PXy)/PXy
pXx
PXy
y
str(y)
as.float(y)
as.numeric(y)
(pXx*PXy)/PXy
x <- median(X)
y <- as.numeric(quantile(Y)[2])
y
pXx
pXy
x <- median(X)
y <- as.numeric(quantile(Y)[2])
pXx <- 1 - ((x-min(X))*(1/N))
PXy <- 1 - ((y-min(X)) * (1/N))
pXx
(pXx*PXy)/PXy
(pXx*PXy)/PXy
pXx*PXy
n <- 10000
N <- 10
X <- runif(n, min = 1, max = N)
Y <- rnorm(n, mean=(N+1)/2, sd = (N+1)/2)
x <- median(X)
y <- as.numeric(quantile(Y)[2])
pXx <- 1 - ((x-min(X))*(1/N))
PXy <- 1 - ((y-min(X)) * (1/N))
(pXx*PXy)/PXy
pXx*PXy
set.seed(124)
n <- 10000
N <- 10
X <- runif(n, min = 1, max = N)
Y <- rnorm(n, mean=(N+1)/2, sd = (N+1)/2)
x <- median(X)
y <- as.numeric(quantile(Y)[2])
pXx <- 1 - ((x-min(X))*(1/N))
PXy <- 1 - ((y-min(X)) * (1/N))
(pXx*PXy)/PXy
pXx*PXy
set.seed(124)
n <- 10000
N <- 10
mu <- (N+1)/2
sd <- (N+1)/2
X <- runif(n, min = 1, max = N)
Y <- rnorm(n, mean= mu, sd = sd)
z <- (y - mu) / sd
z
y
mu
sd
pnorm(z)
pXx*PYy
z <- (y - mu) / sd
PYy <- 1 - pnorm(z)
pXx*PYy
z <- (y - mu) / sd
PYy <- pnorm(z)
pXx*PYy
mu
y
z
z <- (y - mu) / sd
PYy <- 1 - pnorm(z)
pXx*PYy
